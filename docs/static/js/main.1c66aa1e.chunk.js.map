{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategoria","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","ElGifExpertApp","elArticle","categoria","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAyB3C,OAEQ,aADJ,CACI,QAAMC,SAjBC,SAACC,GAEhBA,EAAEC,iBAKCJ,EAAWK,OAAOC,OAAO,IAExBR,GAAa,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,MAOV,SACA,uBACIO,KAAK,OACLC,MAAOT,EAEPU,SA5BQ,SAACP,GACrBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OAErBR,EAAcE,EAAEU,OAAOJ,a,+BCTdK,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DAEXC,EAFW,iDAEoCC,UAAUH,GAF9C,+DAGCI,MAAMF,GAHP,cAGXG,EAHW,gBAKEA,EAAKC,OALP,uBAKVC,EALU,EAKVA,KAEDC,EAAKD,EAAKE,KAAK,SAAAC,GAAM,IAAD,EAEtB,MAAM,CAEFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbzB,kBAmBVM,GAnBU,4CAAD,sDCAPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OADAN,QAAQC,IAAI,CAACc,KAAGC,QAAMV,QAElB,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EAEZhB,mBAAS,CAC/BuB,KAAK,GACLa,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KA8BtC,OAtBAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GAGEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,IAEZxB,QAAQC,IAAI4B,QAQtB,CAACzB,IAKIqB,EDzBsBK,CAAa1B,GAA9Ba,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QA+CpB,OA7CAxB,QAAQC,IAAIuB,GA+CR,qCACC,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAKnDoB,GAAW,mBAAGJ,UAAU,0BAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAOQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,aADc,CACb,EAAD,eAGQA,GADAA,EAAIC,aErE1BgB,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,UAAa,EAME5C,mBAAS,CAAC,YANZ,mBAMzB6C,EANyB,KAMd9C,EANc,KAYhC,OACI,qCAEA,yDAEA,cAAC,EAAD,CAAaA,aAAcA,IAC3B,uBAGA,6BAQQ8C,EAAUpB,KAAI,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAGIA,SAAUA,GADLA,QAQrB,4BAAI4B,QASZD,EAAeG,aAAa,CACxBF,UAAU,iBAGCD,Q,MChDfI,IAASC,OAIL,cAAC,EAAD,CAAgBJ,UAAU,wBAAwBK,SAASC,eAAe,W","file":"static/js/main.1c66aa1e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport const AddCategory = ({setcategoria}) => {\r\n\r\nconst [inputValue, setinputValue] = useState('');\r\n\r\nconst handleInputChange=(e)=>{\r\n    console.log(e.target.value)\r\n\r\n    setinputValue(e.target.value);\r\n}\r\n\r\nconst handleSubmit=(e)=>{\r\n\r\n    e.preventDefault();\r\n\r\n    //como esta funcion es un callBack, se le regresa automaticamente algo, lo que puede ser su valor\r\n    //del array, lo usamos sin necesidad de pasarselo por parametros\r\n    \r\n    if(inputValue.trim().length>2){\r\n\r\n        setcategoria(cats=>[inputValue,...cats]);\r\n        setinputValue('');\r\n    }\r\n\r\n    } \r\n\r\n    return (\r\n        //<>\r\n            <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n\r\n                onChange={handleInputChange}\r\n            />\r\n            </form>\r\n        //</>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setcategoria:PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","\r\n\r\nexport const getGifs=async(category)=>{\r\n\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=dVqIVpEYALrWLE1cqmApjfzlC7NR2rTj`;\r\n    const resp= await fetch(url);\r\n    //desestructuracion data  \r\n    const {data}=await resp.json();\r\n\r\n    const gifs=data.map( img=>{\r\n\r\n        return{//el signo de interrogacion no es obligatorio\r\n            //solo es para ver si tiene la url de la imagen\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    }\r\n\r\n    )\r\n\r\n    return gifs;\r\n\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    console.log({id,title,url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","//import React, { useState ,useEffect} from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images ,loading}=useFetchGifs(category);\r\n\r\n    console.log(loading);\r\n    \r\n\r\n/*\r\nconst [images, setImages] = useState([]);\r\n\r\nuseEffect( ()=>{\r\n\r\n   getGifs(category)\r\n   .then(setImages)//el metodod setImages ya pone por defecto el valor que se le pasa\r\n},[category])\r\n*/\r\n//el corchete vacio, significa que solo quiero que busque la informacion,\r\n//cuando el componente se renderize por primera vez\r\n\r\n//cuando la informacion del array cambie, se renderizara de nuevo\r\n\r\n/*\r\n    const getGifs=async()=>{\r\n\r\n        const url=`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=dVqIVpEYALrWLE1cqmApjfzlC7NR2rTj`;\r\n        const resp= await fetch(url);\r\n        //desestructuracion data  \r\n        const {data}=await resp.json();\r\n\r\n        const gifs=data.map( img=>{\r\n\r\n            return{//el signo de interrogacion no es obligatorio\r\n                //solo es para ver si tiene la url de la imagen\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        }\r\n\r\n        )\r\n\r\n        console.log(gifs);\r\n\r\n        setImages(gifs)\r\n    }\r\n*/\r\n    //getGifs();\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n         <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n         {\r\n         //loading ? <p>Loading</p> : null\r\n         //con && solo valida si es true\r\n         loading && <p className=\"animate__animated flash\">Loading</p> \r\n         }\r\n        <div className=\"card-grid\">\r\n           \r\n\r\n        \r\n            \r\n            {\r\n               \r\n                images.map( img=>(//o podia llamarse {img, title}\r\n                    <GifGridItem \r\n\r\n                       key={img.id}\r\n                        {...img}//esto hace que los valores tomen el valor de propiedad\r\n                    \r\n                    />\r\n                ))\r\n\r\n            }\r\n               \r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs=>{\r\n\r\n            //setTimeout(() => {\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n                console.log(imgs)\r\n            //}, 2000);\r\n            \r\n\r\n\r\n\r\n        })\r\n            \r\n    },[category]);\r\n\r\n    \r\n\r\n\r\n    return state;\r\n}\r\n","//import PropTypes from \"prop-types\"\r\nimport { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\nconst ElGifExpertApp=({elArticle})=>{\r\n\r\n\r\n    //const categorias=['Pokemon','Inuyasha','Dragon ball'];\r\n\r\n    //useState\r\n    const [categoria, setcategoria] = useState(['Pokemon'])\r\n\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n        <h2>Este es el GifExpertApp</h2>\r\n\r\n        <AddCategory setcategoria={setcategoria}/>\r\n        <hr />\r\n \r\n        \r\n        <ol>\r\n            {\r\n                /*\r\n                categoria.map(laCategoria=>{\r\n                    return <li key={laCategoria}>{laCategoria}</li>\r\n                })*/\r\n\r\n\r\n                categoria.map(category=>(\r\n                    <GifGrid \r\n                        \r\n                        key={category}\r\n                        category={category}\r\n\r\n                    />\r\n                ))\r\n            }\r\n        </ol>\r\n\r\n        <p>{elArticle}</p>\r\n\r\n        \r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nElGifExpertApp.defaultProps={\r\n    elArticle:\"Sin novedades\"\r\n}\r\n\r\nexport default ElGifExpertApp;","import React from 'react';\n\n\nimport ReactDOM from 'react-dom';\nimport ElGifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\n\n\nReactDOM.render(\n\n  \n   \n    <ElGifExpertApp elArticle=\"I won't be a loser \"/>,document.getElementById('root')\n);\n\n"],"sourceRoot":""}